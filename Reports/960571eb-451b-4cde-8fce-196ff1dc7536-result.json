{"name": "test", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: crashed.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from msedge location C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6BCE25DC2+61250]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDB06C9+206985]\n\t(No symbol) [0x00007FF6BCBBE3C7]\n\t(No symbol) [0x00007FF6BCBF0DA1]\n\t(No symbol) [0x00007FF6BCBECDE7]\n\t(No symbol) [0x00007FF6BCC2E9DC]\n\t(No symbol) [0x00007FF6BCC24563]\n\t(No symbol) [0x00007FF6BCBF9FCE]\n\t(No symbol) [0x00007FF6BCBF918C]\n\t(No symbol) [0x00007FF6BCBF9B81]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6BCFDDF54+1072532]\n\t(No symbol) [0x00007FF6BCC72D9C]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6BCD1EF4C+51468]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6BCD13805+4549]\n\tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6BCFDCF15+1068373]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDBA0D1+246417]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDB5434+226804]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDB556B+227115]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDABD60+188192]\n\tBaseThreadInitThunk [0x00007FF875C07344+20]\n\tRtlUserThreadStart [0x00007FF8766026B1+33]", "trace": "def test():\n>       driver = webdriver.Edge()\n\ntests\\test_sample4.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\edge\\webdriver.py:45: in __init__\n    super().__init__(\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:208: in __init__\n    self.start_session(capabilities)\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:292: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002A4627C0250>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Microsoft Edge faile...DABD60+188192]\\\\n\\\\tBaseThreadInitThunk [0x00007FF875C07344+20]\\\\n\\\\tRtlUserThreadStart [0x00007FF8766026B1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Microsoft Edge failed to start: crashed.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from msedge location C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe is no longer running, so msedgedriver is assuming that msedge has crashed.)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6BCE25DC2+61250]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDB06C9+206985]\nE       \t(No symbol) [0x00007FF6BCBBE3C7]\nE       \t(No symbol) [0x00007FF6BCBF0DA1]\nE       \t(No symbol) [0x00007FF6BCBECDE7]\nE       \t(No symbol) [0x00007FF6BCC2E9DC]\nE       \t(No symbol) [0x00007FF6BCC24563]\nE       \t(No symbol) [0x00007FF6BCBF9FCE]\nE       \t(No symbol) [0x00007FF6BCBF918C]\nE       \t(No symbol) [0x00007FF6BCBF9B81]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6BCFDDF54+1072532]\nE       \t(No symbol) [0x00007FF6BCC72D9C]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6BCD1EF4C+51468]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF6BCD13805+4549]\nE       \tMicrosoft::Applications::Events::EventProperty::to_string [0x00007FF6BCFDCF15+1068373]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDBA0D1+246417]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDB5434+226804]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDB556B+227115]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF6BCDABD60+188192]\nE       \tBaseThreadInitThunk [0x00007FF875C07344+20]\nE       \tRtlUserThreadStart [0x00007FF8766026B1+33]\n\nC:\\Program Files\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "start": 1717056675836, "stop": 1717056679106, "uuid": "07bdfa13-ac0b-45d7-a887-4c399e9643c7", "historyId": "2d5a771d656fe2478a68b50c491a7851", "testCaseId": "2d5a771d656fe2478a68b50c491a7851", "fullName": "tests.test_sample4#test", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_sample4"}, {"name": "host", "value": "INHNJLPT-984680"}, {"name": "thread", "value": "26244-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_sample4"}]}